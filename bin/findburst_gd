#!/usr/bin/env python3
'''
Created on Jul 23, 2017

@author: Daniel Sela, Arnon Sela

Example parameters:
    --match ../dat/000409_xtetrans_1a_match.dat --mindelta 0.1 --minsig 1.0 --minchisq 2.0  --objid 114 144 --recoverable
'''
from rotseana.findburst.findburst_gd import findburst_gd

def findburst_gd_cmd(match,mindelta,minsig,pdffile=None, log=None, plot=False,fits_index=1,minchisq=None,objid=None,refra=None,refdec=None,rotse=None,emask=None,rmask=None, recoverable=False, recover=False, recdir=None, verbose=False):
    result=findburst_gd(match,mindelta,minsig,pdffile=pdffile, plot=plot,fits_index=fits_index,minchisq=minchisq,objid=objid,refra=refra,refdec=refdec,rotse=rotse,log=log,emask=emask,rmask=rmask, recoverable=recoverable, recover=recover, recdir=recdir, verbose=verbose)
    print('mag jd merr')
    for objid, mag, jd, merr in result:
        print('%s %s %s' % (mag, jd, merr))


def cmdargs():
    import argparse
    import os

    filename = os.path.basename(__file__)
    progname = filename.rpartition('.')[0]

    parser = argparse.ArgumentParser(description="""
{progname} fetch data of good observations for specific object ids in MATCH structured data.

Example:

    {progname} --file 000409_xtetrans_1a_match.dat --mindelta 0.1 --minsig 1.0 --minchisq 2.0  --log name.log
""".format(progname=progname))
    parser.add_argument('--file', '-f', type=str, required=True, dest='match',
                        help="""Path to MATCH data file.""")
    parser.add_argument('--fits-index', '-i', type=int, required=False, default=1, dest='fits_index',
                        help="""In case of FITS data file, identifies the extension to read. defaults to 1.""")
    parser.add_argument('--mindelta', type=float, default=0.1, required=False,
                        help="""minimum delta""")
    parser.add_argument('--minsig', type=float, default=1.0, required=False,
                        help="""minimum sigma""")
    parser.add_argument('--minchisq', type=float, default=2.0, required=False,
                        help="""minimum chisg""")
    parser.add_argument('--objid', nargs='*', type=int, 
                        help="""specific objids to process""")
    parser.add_argument('--refra', type=float, required=False,
                        help="""reference rg """)
    parser.add_argument('--refdec', type=float, required=False,
                        help="""reference dec""")
    parser.add_argument('--rotse', type=int, default=1, required=False,
                        help="""rotse""")
    parser.add_argument('--log', type=str, required=False,
                        help="""Path to log to store result""")
    #parser.add_argument('--plot', action='store_true', required=False, default=False,
    #                    help="""triggers to plot results""")
    parser.add_argument('--emask', type=float, required=False,
                        help="""emask""")
    parser.add_argument('--rmask', type=float, required=False,
                        help="""rmask""")
    parser.add_argument('--recoverable', action="store_true", required=False, default=False, 
                        help="""run the program with recoverability - save computed object for recovery in later runs""")
    parser.add_argument('--recover', action="store_true", required=False, default=False,
                        help="""run the procram in recovery in which saved computed object would be restored instead of recomputed""")
    parser.add_argument('--recdir', type=str, required=False,
                        help="""Path to where recovery file are stored.""")
    parser.add_argument('--verbose', '-v', action="store_true", required=False, default=False,
                        help="""set verbose""")
    args = parser.parse_args()  

    # specific option validation:
    #if args.plot and args.log is None:
    #    parser.error("--plot requires --log.")
    
    argsd=vars(args)
    return argsd

if __name__=='__main__':
    args=cmdargs()
    findburst_gd_cmd(**args)
    
